/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        bloq_may {
            bindings = <&caps_word>;
            key-positions = <15 20>;
            layers = <0>;
        };
    };

    macros {
        php_arrow: php_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "PHP_ARROW";
        };

        php_equalize: php_equalize {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "PHP_EQUALIZE";
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
        };

        km_mo: km_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "KM_MO";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q        &kp W        &kp E              &kp R         &kp T             &kp Y           &kp U           &kp I          &kp O        &kp P                     &none
&none  &hml LALT A  &hml LGUI S  &hml LEFT_SHIFT D  &hml LCTRL F  &kp G             &kp H           &hmr RCTRL J    &hmr RSHIFT K  &hmr LGUI L  &hmr RIGHT_ALT SEMICOLON  &kp SQT
&none  &kp Z        &kp X        &kp C              &kp V         &kp B             &kp N           &kp M           &kp COMMA      &kp DOT      &kp FSLH                  &none
                                 &kp TAB            &km_mo 2 ESC  &km_mo 1 ENTER    &km_mo 3 ENTER  &km_mo 2 ENTER  &kp BACKSPACE
            >;
        };

        arrows {
            bindings = <
&trans  &kp LG(Q)     &kp LG(W)     &kp LA(LG(LEFT))  &kp LA(LG(RIGHT))  &trans    &kp HOME      &kp PG_DN  &kp PG_UP  &kp END       &kp LG(PLUS)   &trans
&trans  &kp LALT      &kp LGUI      &kp LSHFT         &kp LCTRL          &trans    &kp LEFT      &kp DOWN   &kp UP     &kp RIGHT     &kp LG(N0)     &trans
&trans  &kp LC(DOWN)  &kp LC(LEFT)  &kp LC(UP)        &kp LC(RIGHT)      &trans    &kp LG(LBKT)  &trans     &trans     &kp LG(RBKT)  &kp LG(MINUS)  &trans
                                    &trans            &trans             &trans    &trans        &trans     &trans
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp F1            &kp F2            &kp F3              &kp F4         &kp K_PLAY_PAUSE     &kp FSLH  &kp N7                &kp N8              &kp N9            &kp MINUS           &trans
&trans  &hml LEFT_ALT F5  &hml LEFT_GUI F6  &hml LEFT_SHIFT F7  &hml LCTRL F8  &kp C_VOLUME_DOWN    &kp STAR  &hmr LEFT_CONTROL N4  &hmr LEFT_SHIFT N5  &hmr LEFT_GUI N6  &hmr LEFT_ALT PLUS  &trans
&trans  &kp F9            &kp F10           &kp F11             &kp F12        &kp C_VOLUME_UP      &kp DOT   &kp N1                &kp N2              &kp N3            &kp FSLH            &trans
                                            &trans              &trans         &trans               &trans    &kp N0                &kp COMMA
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp LS(EXCL)   &kp LS(AT)         &kp LS(POUND)  &kp LS(DLLR)   &kp LS(PRCNT)  &kp LS(CARET)    &kp LS(CARET)  &kp LS(AMPS)   &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)  &trans
&kp LS(TILDE)  &kp GRAVE          &kp SQT        &kp LS(LBRC)   &kp LS(RBRC)   &trans           &kp LS(PIPE)   &kp MINUS      &kp EQUAL     &kp LBKT      &kp RBKT      &trans
&trans         &kp LA(LS(SLASH))  &kp LA(N1)     &php_equalize  &php_arrow     &trans           &kp LA(N)      &kp LS(UNDER)  &kp LS(PLUS)  &kp DOT       &kp BSLH      &trans
                                                 &trans         &trans         &trans           &trans         &trans         &trans
            >;
        };
    };
};
